Parsing syllables: modeling OT computationally

In this paper, I propose to implement syllabification in OT as a parser. I propose several innovations that result in a finite and small candidate set. The candidate set problem is handled with several moves: i) MAX and DEP violations are not hypothesized by the parser, ii) candidates are encoded locally, and iii) EVAL is applied constraint by constraint.
  The parser I propose is implemented in Prolog. It has a number of desirable consequences. First, it runs and thus provides an existence proof that syllabification can be implemented in OT. There are a number of other desirable consequences as well. First, constraints are implemented as finite-state transducers. Second, the parser makes several interesting claims about the phonological properties of so-called nonrecoverable insertions and deletions. Third, the implementation suggests some particular reformulations of some of the benchmark constraints in the OT arsenal, e.g. *COMPLEX, PARSE, ONSET, and NOCODA.
