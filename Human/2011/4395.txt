On Compressing Permutations and Adaptive Sorting

Previous compact representations of permutations have focused on adding a small index on top of the plain data $<π(1), π(2),...π(n)>$, in order to efficiently support the application of the inverse or the iterated permutation.
  In this paper we initiate the study of techniques that exploit the compressibility of the data itself, while retaining efficient computation of $π(i)$ and its inverse.
  In particular, we focus on exploiting {\em runs}, which are subsets (contiguous or not) of the domain where the permutation is monotonic.
  Several variants of those types of runs arise in real applications such as inverted indexes and suffix arrays.
  Furthermore, our improved results on compressed data structures for permutations also yield better adaptive sorting algorithms.
