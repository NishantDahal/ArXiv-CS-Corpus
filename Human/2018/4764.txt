On-line Chain Partitioning Approach to Scheduling

An on-line chain partitioning algorithm receives the points of the poset from some externally determined list. Being presented with a new point the algorithm learns the comparability status of this new point to all previously presented ones. As each point is received, the algorithm assigns this new point to a chain in an irrevocable manner and this assignment is made without knowledge of future points. Kierstead presented an algorithm using $(5^w-1)/4$ chains to cover each poset of width $w$. Felsner proved that width $2$ posets can be partitioned on-line into $5$ chains. We present an algorithm using $16$ chains on posets of width $3$. This result significantly narrows down the previous bound of $31$. Moreover, we address the on-line chain partitioning problem for interval orders. Kierstead and Trotter presented an algorithm using $3w-2$ chains. We deal with an up-growing version of an on-line chain partition of interval orders, i.e. we restrict possible inputs by the rule that each new point is maximal at the moment of its arrival. We present an algorithm using $2w-1$ chains and show that there is no better one. These problems come from a need for better algorithms that can be applied to scheduling. Each on-line chain partitioning algorithm schedules tasks in a multiprocessor environment, and therefore can be applied in order to minimize number of processors.
