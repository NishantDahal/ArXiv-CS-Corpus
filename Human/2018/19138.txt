Pragmatic approach to structured data querying via natural language interface

As the use of technology increases and data analysis becomes integral in many businesses, the ability to quickly access and interpret data has become more important than ever. Information retrieval technologies are being utilized by organizations and companies to manage their information systems and processes. Despite information retrieval of a large amount of data being efficient organized in relational databases, a user still needs to master the DB language/schema to completely formulate the queries. This puts a burden on organizations and companies to hire employees that are proficient in DB languages/schemas to formulate queries. To reduce some of the burden on already overstretched data teams, many organizations are looking for tools that allow non-developers to query their databases. Unfortunately, writing a valid SQL query that answers the question a user is trying to ask isn't always easy. Even seemingly simple questions, like "Which start-up companies received more than $200M in funding?" can actually be very hard to answer, let alone convert into a SQL query. How do you define start-up companies? By size, location, duration of time they have been incorporated? This may be fine if a user is working with a database they're already familiar with, but what if users are not familiar with the database. What is needed is a centralized system that can effectively translate natural language queries into specific database queries for different customer database types. There is a number of factors that can dramatically affect the system architecture and the set of algorithms used to translate NL queries into a structured query representation.
