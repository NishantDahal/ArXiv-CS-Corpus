Computing the Complete Pareto Front

We give an efficient algorithm to enumerate all elements of a Pareto front in a multi-objective optimization problem in which the space of values is finite for all objectives. Our algorithm uses a feasibility check for a search space element as an oracle and minimizes the number of oracle calls that are necessary to identify the Pareto front of the problem. Given a $k$-dimensional search space in which each dimension has $n$ elements, it needs $p \cdot (k \cdot \lceil \log_2 n \rceil + 1) + ψ(p)$ oracle calls, where $p$ is the size of the Pareto front and $ψ(p)$ is the number of greatest elements of the part of the search space that is not dominated by the Pareto front elements. We show that this number of oracle calls is essentially optimal as approximately $p \cdot k \cdot \log_2 n$ oracle calls are needed to identify the Pareto front elements in sparse Pareto sets and $ψ(p)$ calls are needed to show that no element is missing in the set of Pareto front elements found.
