Partitionnement Déterministe pour Résoudre les Problèmes de Programmation Par Contraintes en utilisant le Framework Parallèle Bobpp

This paper presents a deterministic parallelization to explore a Constraint Programming search space. This work is an answer to an industrial project named PAJERO, which is in need of a parallel constraint solver which always responds with the same solution whether using sequential or parallel machines. It is well known that parallel tree search changes the order in which the exploration of solution space is done. In the context where the first solution found is returned, using a different number of cores may change the returned solution. In the literature, several non deterministic strategies have been proposed to parallelize the exploration of Constraint Programming search space. Most of them are based on the Work Stealing technique used to partition the Constraint Programming search space on demand and during the execution of the search algorithm. Our study focuses on the determinism of the parallel search versus the sequential one. We consider that the sequential search algorithm is deterministic, then propose an elegant solution introducing a total order on the nodes in which the parallel algorithm always gives the same solution as the sequential one regardless of the number of cores used. To evaluate this deterministic strategy, we ran tests using the Google OR-Tools Constraint Programming solver on top of our parallel Bobpp framework. The performances are illustrated by solving Constraint Programming problems modeled in FlatZinc format.
