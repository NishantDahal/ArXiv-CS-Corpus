Plain stopping time and conditional complexities revisited

In this paper we analyze the notion of "stopping time complexity", informally defined as the amount of information needed to specify when to stop while reading an infinite sequence. This notion was introduced by Vovk and Pavlovic (2016). It turns out that plain stopping time complexity of a binary string $x$ could be equivalently defined as (a) the minimal plain complexity of a Turing machine that stops after reading $x$ on a one-directional input tape; (b) the minimal plain complexity of an algorithm that enumerates a prefix-free set containing $x$; (c)~the conditional complexity $C(x|x*)$ where $x$ in the condition is understood as a prefix of an infinite binary sequence while the first $x$ is understood as a terminated binary string; (d) as a minimal upper semicomputable function $K$ such that each binary sequence has at most $2^n$ prefixes $z$ such that $K(z)<n$; (e) as $\max C^X(x)$ where $C^X(z)$ is plain Kolmogorov complexity of $z$ relative to oracle $X$ and the maximum is taken over all extensions $X$ of $x$.
  We also show that some of these equivalent definitions become non-equivalent in the more general setting where the condition $y$ and the object $x$ may differ. We also answer an open question from Chernov, Hutter and~Schmidhuber.
