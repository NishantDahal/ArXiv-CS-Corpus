A green program lifecycle supporting energy-efficient applications

With the advent of the Internet of Things (IoT), the percentage of global emissions attributable to Information Systems is expected to further increase in the coming years, due to a proliferation of Internet-connected devices omnipresent in our daily lives (e.g., electric meters, wearable devices, etc.). Although software systems do not directly consume energy, they strongly affect the energy consumption of the hardware. So, developers should be more aware of the energy consumed by these systems during their lifetime, and think about the long-term consequences in the sustainability of our planet Earth. Indeed, once deployed, the energy consumed by a system depends on several factors determined mainly by the usage context. This means that the area of energy-efficient software development needs green development lifecycles that provide appropriate methodologies and tools to identify and analyze the energy hotspots of applications early at design time, and see how they can be self-adapted to the runtime context usage. Regrettably, there is a narrow view of developers and users and their responsibility in the energy consumed during application execution. Developers rarely address energy efficiency as some recent studies show, mostly because they lack appropriate methodologies and tools that help them to produce green software at runtime. So, although software energy efficiency is becoming increasingly important in an ever more technology-dependent world, development processes of self-greening systems supported by tools are still in their infancy. On the other hand, considering that many of current applications are normally deployed in smartphones or in any kind of smart objects (e.g., sensors, watches, etc.), optimizing the energy consumption during the execution will also have a strong impact in battery saving, enhancing the quality of experience of final users.
