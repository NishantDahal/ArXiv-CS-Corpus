Superposition as memory: unlocking quantum automatic complexity

Imagine a lock with two states, "locked" and "unlocked", which may be manipulated using two operations, called 0 and 1. Moreover, the only way to (with certainty) unlock using four operations is to do them in the sequence 0011, i.e., $0^n1^n$ where $n=2$. In this scenario one might think that the lock needs to be in certain further states after each operation, so that there is some memory of what has been done so far. Here we show that this memory can be entirely encoded in superpositions of the two basic states "locked" and "unlocked", where, as dictated by quantum mechanics, the operations are given by unitary matrices. Moreover, we show using the Jordan--Schur lemma that a similar lock is not possible for $n=60$.
  We define the semi-classical quantum automatic complexity $Q_{s}(x)$ of a word $x$ as the infimum in lexicographic order of those pairs of nonnegative integers $(n,q)$ such that there is a subgroup $G$ of the projective unitary group PU$(n)$ with $|G|\le q$ and with $U_0,U_1\in G$ such that, in terms of a standard basis $\{e_k\}$ and with $U_z=\prod_k U_{z(k)}$, we have $U_x e_1=e_2$ and $U_y e_1 \ne e_2$ for all $y\ne x$ with $|y|=|x|$. We show that $Q_s$ is unbounded and not constant for strings of a given length. In particular, \[
  Q_{s}(0^21^2)\le (2,12) < (3,1) \le Q_{s}(0^{60}1^{60}) \] and $Q_s(0^{120})\le (2,121)$.
