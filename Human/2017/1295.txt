Space-Efficient Hidden Surface Removal

We propose a space-efficient algorithm for hidden surface removal that combines one of the fastest previous algorithms for that problem with techniques based on bit manipulation. Such techniques had been successfully used in other settings, for example to reduce working space for several graph algorithms. However, bit manipulation is not usually employed in geometric algorithms because the standard model of computation (the real RAM) does not support it. For this reason, we first revisit our model of computation to have a reasonable theoretical framework. Under this framework we show how the use of a bit representation for the union of triangles, in combination with rank-select data structures, allows us to implicitly compute the union of $n$ triangles with roughly $O(1)$ bits per union boundary vertex. This results in an algorithm that uses at most as much space as the previous one, and depending on the input, can give a reduction of up to a factor $Î˜(\log n)$, while maintaining the running time.
