Aesop Fable for Network Loops

Detecting loops in data networks usually involves counting down a hop limit or caching data at each hop to detect a cycle. Using a hop limit means that the origin of a packet must know the maximum distance a packet could travel without loops. It also means a loop is not detected until it travels that maximum distance, even if that is many loops. Caching a packet signature at each hop, such as a hash or nonce, could require large amounts of memory at every hop because that cached information must persist for as long as a loop could forward packets. This paper presents a new distributed loop detection mechanism based on a Tortoise and Hare algorithm that can quickly detect loops without caching per-packet data at each hop with a modest amount of additional state in each packet.
